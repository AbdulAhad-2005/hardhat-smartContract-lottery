{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnougthETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "RaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbe16b8efc583dd3b5abc092c7c7f22e84772684b3c2076061042ebf00b5e6d3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1217473",
    "logsBloom": "0x
    "blockHash": "0xb07300be9ca9c1c1a566589472299c971de8af57b08b01b962aa898a06dce23e",
    "transactionHash": "0xbbe16b8efc583dd3b5abc092c7c7f22e84772684b3c2076061042ebf00b5e6d3",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1217473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0xc799bd1e3bd4d1a41cd4968997a4e03dfd2a3c7c04b695881138580163f42887",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "0cf6bf1e58bd1754e48871442bd9872e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnougthETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdul Ahad\",\"details\":\"This implements chainlink VRF-V2 and chainlink Automation\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"title\":\"A Raffle contract that uses Chainlink VRF to pick a winner\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract raffle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnougthETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\n/**\\n * @title A Raffle contract that uses Chainlink VRF to pick a winner\\n * @author Abdul Ahad\\n * @notice This contract is for creating an untamperable decentralized smart contract raffle\\n * @dev This implements chainlink VRF-V2 and chainlink Automation\\n */\\n\\n/* Functions */\\ncontract Raffle is VRFConsumerBaseV2 , AutomationCompatibleInterface {\\n    /* type declarations */\\n    enum RaffleState { Open, Calculating }\\n\\n    /* State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subsciptionID;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // lottery variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event RaffleWinner(address indexed winner);\\n\\n    constructor(address vrfCoordinator, uint256 entranceFee, bytes32 keyHash, uint64 subscriptionId, uint32 callBackGasLimit, uint256 interval) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_keyHash = keyHash;\\n        i_subsciptionID = subscriptionId;\\n        i_callBackGasLimit = callBackGasLimit;\\n        s_raffleState = RaffleState.Open;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnougthETHEntered();\\n        }\\n        if(s_raffleState != RaffleState.Open) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n     /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (s_raffleState == RaffleState.Open);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n        return (upkeepNeeded, \\\"\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\n        }\\n        s_raffleState = RaffleState.Calculating;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subsciptionID,\\n            REQUEST_CONFIRMATIONS,\\n            i_callBackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.Open;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit RaffleWinner(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns(uint256) {\\n        return i_entranceFee;\\n    }\\n    function getPlayer(uint256 index) public view returns(address) {\\n        return s_players[index];\\n    }\\n    function getRecentWinner() public view returns(address) {\\n        return s_recentWinner;\\n    }\\n    function getRaffleState() public view returns(RaffleState) {\\n        return s_raffleState;\\n    }\\n    function getNumWords() public pure returns(uint32) {\\n        return NUM_WORDS;\\n    }\\n    function getNumOfPlayers() public view returns(uint256) {\\n        return s_players.length;\\n    }\\n    function getLatestTimeStamp() public view returns(uint256) {\\n        return s_lastTimeStamp;\\n    }\\n    function getRequestConfirmations() public pure returns(uint16) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n    function getInterval() public view returns(uint256) {\\n        return i_interval;\\n    }\\n}\\n\\n// Welcome to Chainlink VRF!\\n// We require a signature in order to ensure you are the owner of the subscription.\\n// Wallet address:\\n// 0x18c326ba158dc5d3de485dff004c7e87ab4386ba\\n// VRF Coordinator address:\\n// 0x9ddfaca8183c41ad55329bdeed9f6a8d53168b1b\\n// Subscription ID:\\n// 87141880561383537337132419343670108573333211458126835069502268840786524844189\\n\",\"keccak256\":\"0x9a72bf6fc538c07bb3f3546c3615f350ca2dd71abb34e416a3c23cfd6b164cc6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b5060405161180e38038061180e83398181016040528101906100339190610270565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff02191690836001811115610105576101046102fd565b5b02179055504260028190555080610140818152505050505050505061032c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101558261012a565b9050919050565b6101658161014a565b811461017057600080fd5b50565b6000815190506101828161015c565b92915050565b6000819050919050565b61019b81610188565b81146101a657600080fd5b50565b6000815190506101b881610192565b92915050565b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000815190506101ee816101c8565b92915050565b600067ffffffffffffffff82169050919050565b610211816101f4565b811461021c57600080fd5b50565b60008151905061022e81610208565b92915050565b600063ffffffff82169050919050565b61024d81610234565b811461025857600080fd5b50565b60008151905061026a81610244565b92915050565b60008060008060008060c0878903121561028d5761028c610125565b5b600061029b89828a01610173565b96505060206102ac89828a016101a9565b95505060406102bd89828a016101df565b94505060606102ce89828a0161021f565b93505060806102df89828a0161025b565b92505060a06102f089828a016101a9565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161147361039b600039600081816107e8015261086b015260006106a50152600061068201526000610661015260006106250152600081816102fa01526103f7015260008181610337015261038b01526114736000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780635f1b0fd8116100595780635f1b0fd8146102255780636e04ff0d1461025057806391ad27b41461028e578063e55ae4e8146102b9576100c2565b8063473f1ddc146101a457806353a2c19a146101cf578063565429de146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bc7565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c59565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e0d565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bc7565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610ec4565b61056e565b005b3480156101b057600080fd5b506101b961075e565b6040516101c69190610f52565b60405180910390f35b3480156101db57600080fd5b506101e4610788565b6040516101f19190610f8c565b60405180910390f35b34801561020657600080fd5b5061020f610791565b60405161021c9190610bc7565b60405180910390f35b34801561023157600080fd5b5061023a61079d565b6040516102479190610fc4565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190611094565b6107a6565b604051610285929190611177565b60405180910390f35b34801561029a57600080fd5b506102a3610867565b6040516102b09190610bc7565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906111a7565b61088f565b6040516102ed9190610f52565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906111d4565b60405180910390fd5b6103f182826108d6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f6cfec1a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610be2565b5b600160149054906101000a900460ff16600181111561048557610484610be2565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610588604051806020016040528060008152506107a6565b509050806105f75747600080549050600160149054906101000a900460ff1660018111156105b9576105b8610be2565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee939291906111fd565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061c5761061b610be2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190611270565b6020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906112d8565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60008080549050905090565b60006003905090565b6000606060008060018111156107bf576107be610be2565b5b600160149054906101000a900460ff1660018111156107e1576107e0610be2565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108159190611334565b119050600080600080549050119050600080471190508380156108355750825b801561083e5750815b80156108475750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108a4576108a3611368565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108f1576108f0611368565b5b602002602001015161090391906113c6565b9050600080828154811061091a57610919611368565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ae576109ad610be2565b5b0217905550600067ffffffffffffffff8111156109ce576109cd610cca565b5b6040519080825280602002602001820160405280156109fc5781602001602082028036833780820191505090505b5060009080519060200190610a12929190610b07565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4090611428565b60006040518083038185875af1925050503d8060008114610a7d576040519150601f19603f3d011682016040523d82523d6000602084013e610a82565b606091505b5050905080610abd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f16d6ae18ca26331fba5a8b53b0749a009d33b172b68a49d64a767782f5b6010360405160405180910390a25050505050565b828054828255906000526020600020908101928215610b80579160200282015b82811115610b7f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b27565b5b509050610b8d9190610b91565b5090565b5b80821115610baa576000816000905550600101610b92565b5090565b6000819050919050565b610bc181610bae565b82525050565b6000602082019050610bdc6000830184610bb8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2257610c21610be2565b5b50565b6000819050610c3382610c11565b919050565b6000610c4382610c25565b9050919050565b610c5381610c38565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9181610bae565b8114610c9c57600080fd5b50565b600081359050610cae81610c88565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0282610cb9565b810181811067ffffffffffffffff82111715610d2157610d20610cca565b5b80604052505050565b6000610d34610c74565b9050610d408282610cf9565b919050565b600067ffffffffffffffff821115610d6057610d5f610cca565b5b602082029050602081019050919050565b600080fd5b6000610d89610d8484610d45565b610d2a565b90508083825260208201905060208402830185811115610dac57610dab610d71565b5b835b81811015610dd55780610dc18882610c9f565b845260208401935050602081019050610dae565b5050509392505050565b600082601f830112610df457610df3610cb4565b5b8135610e04848260208601610d76565b91505092915050565b60008060408385031215610e2457610e23610c7e565b5b6000610e3285828601610c9f565b925050602083013567ffffffffffffffff811115610e5357610e52610c83565b5b610e5f85828601610ddf565b9150509250929050565b600080fd5b60008083601f840112610e8457610e83610cb4565b5b8235905067ffffffffffffffff811115610ea157610ea0610e69565b5b602083019150836001820283011115610ebd57610ebc610d71565b5b9250929050565b60008060208385031215610edb57610eda610c7e565b5b600083013567ffffffffffffffff811115610ef957610ef8610c83565b5b610f0585828601610e6e565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3c82610f11565b9050919050565b610f4c81610f31565b82525050565b6000602082019050610f676000830184610f43565b92915050565b600063ffffffff82169050919050565b610f8681610f6d565b82525050565b6000602082019050610fa16000830184610f7d565b92915050565b600061ffff82169050919050565b610fbe81610fa7565b82525050565b6000602082019050610fd96000830184610fb5565b92915050565b600080fd5b600067ffffffffffffffff821115610fff57610ffe610cca565b5b61100882610cb9565b9050602081019050919050565b82818337600083830152505050565b600061103761103284610fe4565b610d2a565b90508281526020810184848401111561105357611052610fdf565b5b61105e848285611015565b509392505050565b600082601f83011261107b5761107a610cb4565b5b813561108b848260208601611024565b91505092915050565b6000602082840312156110aa576110a9610c7e565b5b600082013567ffffffffffffffff8111156110c8576110c7610c83565b5b6110d484828501611066565b91505092915050565b60008115159050919050565b6110f2816110dd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611132578082015181840152602081019050611117565b60008484015250505050565b6000611149826110f8565b6111538185611103565b9350611163818560208601611114565b61116c81610cb9565b840191505092915050565b600060408201905061118c60008301856110e9565b818103602083015261119e818461113e565b90509392505050565b6000602082840312156111bd576111bc610c7e565b5b60006111cb84828501610c9f565b91505092915050565b60006040820190506111e96000830185610f43565b6111f66020830184610f43565b9392505050565b60006060820190506112126000830186610bb8565b61121f6020830185610bb8565b61122c6040830184610bb8565b949350505050565b6000819050919050565b61124781611234565b82525050565b600067ffffffffffffffff82169050919050565b61126a8161124d565b82525050565b600060a082019050611285600083018861123e565b6112926020830187611261565b61129f6040830186610fb5565b6112ac6060830185610f7d565b6112b96080830184610f7d565b9695505050505050565b6000815190506112d281610c88565b92915050565b6000602082840312156112ee576112ed610c7e565b5b60006112fc848285016112c3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133f82610bae565b915061134a83610bae565b925082820390508181111561136257611361611305565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113d182610bae565b91506113dc83610bae565b9250826113ec576113eb611397565b5b828206905092915050565b600081905092915050565b50565b60006114126000836113f7565b915061141d82611402565b600082019050919050565b600061143382611405565b915081905091905056fea264697066735822122096ed3a619434305817e88e6e0c2e18f60dbd00f99119422ba76b57eedecceaed64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780635f1b0fd8116100595780635f1b0fd8146102255780636e04ff0d1461025057806391ad27b41461028e578063e55ae4e8146102b9576100c2565b8063473f1ddc146101a457806353a2c19a146101cf578063565429de146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bc7565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c59565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e0d565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bc7565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610ec4565b61056e565b005b3480156101b057600080fd5b506101b961075e565b6040516101c69190610f52565b60405180910390f35b3480156101db57600080fd5b506101e4610788565b6040516101f19190610f8c565b60405180910390f35b34801561020657600080fd5b5061020f610791565b60405161021c9190610bc7565b60405180910390f35b34801561023157600080fd5b5061023a61079d565b6040516102479190610fc4565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190611094565b6107a6565b604051610285929190611177565b60405180910390f35b34801561029a57600080fd5b506102a3610867565b6040516102b09190610bc7565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906111a7565b61088f565b6040516102ed9190610f52565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906111d4565b60405180910390fd5b6103f182826108d6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f6cfec1a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610be2565b5b600160149054906101000a900460ff16600181111561048557610484610be2565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610588604051806020016040528060008152506107a6565b509050806105f75747600080549050600160149054906101000a900460ff1660018111156105b9576105b8610be2565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee939291906111fd565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061c5761061b610be2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190611270565b6020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906112d8565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60008080549050905090565b60006003905090565b6000606060008060018111156107bf576107be610be2565b5b600160149054906101000a900460ff1660018111156107e1576107e0610be2565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108159190611334565b119050600080600080549050119050600080471190508380156108355750825b801561083e5750815b80156108475750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108a4576108a3611368565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108f1576108f0611368565b5b602002602001015161090391906113c6565b9050600080828154811061091a57610919611368565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ae576109ad610be2565b5b0217905550600067ffffffffffffffff8111156109ce576109cd610cca565b5b6040519080825280602002602001820160405280156109fc5781602001602082028036833780820191505090505b5060009080519060200190610a12929190610b07565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4090611428565b60006040518083038185875af1925050503d8060008114610a7d576040519150601f19603f3d011682016040523d82523d6000602084013e610a82565b606091505b5050905080610abd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f16d6ae18ca26331fba5a8b53b0749a009d33b172b68a49d64a767782f5b6010360405160405180910390a25050505050565b828054828255906000526020600020908101928215610b80579160200282015b82811115610b7f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b27565b5b509050610b8d9190610b91565b5090565b5b80821115610baa576000816000905550600101610b92565b5090565b6000819050919050565b610bc181610bae565b82525050565b6000602082019050610bdc6000830184610bb8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2257610c21610be2565b5b50565b6000819050610c3382610c11565b919050565b6000610c4382610c25565b9050919050565b610c5381610c38565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9181610bae565b8114610c9c57600080fd5b50565b600081359050610cae81610c88565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0282610cb9565b810181811067ffffffffffffffff82111715610d2157610d20610cca565b5b80604052505050565b6000610d34610c74565b9050610d408282610cf9565b919050565b600067ffffffffffffffff821115610d6057610d5f610cca565b5b602082029050602081019050919050565b600080fd5b6000610d89610d8484610d45565b610d2a565b90508083825260208201905060208402830185811115610dac57610dab610d71565b5b835b81811015610dd55780610dc18882610c9f565b845260208401935050602081019050610dae565b5050509392505050565b600082601f830112610df457610df3610cb4565b5b8135610e04848260208601610d76565b91505092915050565b60008060408385031215610e2457610e23610c7e565b5b6000610e3285828601610c9f565b925050602083013567ffffffffffffffff811115610e5357610e52610c83565b5b610e5f85828601610ddf565b9150509250929050565b600080fd5b60008083601f840112610e8457610e83610cb4565b5b8235905067ffffffffffffffff811115610ea157610ea0610e69565b5b602083019150836001820283011115610ebd57610ebc610d71565b5b9250929050565b60008060208385031215610edb57610eda610c7e565b5b600083013567ffffffffffffffff811115610ef957610ef8610c83565b5b610f0585828601610e6e565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3c82610f11565b9050919050565b610f4c81610f31565b82525050565b6000602082019050610f676000830184610f43565b92915050565b600063ffffffff82169050919050565b610f8681610f6d565b82525050565b6000602082019050610fa16000830184610f7d565b92915050565b600061ffff82169050919050565b610fbe81610fa7565b82525050565b6000602082019050610fd96000830184610fb5565b92915050565b600080fd5b600067ffffffffffffffff821115610fff57610ffe610cca565b5b61100882610cb9565b9050602081019050919050565b82818337600083830152505050565b600061103761103284610fe4565b610d2a565b90508281526020810184848401111561105357611052610fdf565b5b61105e848285611015565b509392505050565b600082601f83011261107b5761107a610cb4565b5b813561108b848260208601611024565b91505092915050565b6000602082840312156110aa576110a9610c7e565b5b600082013567ffffffffffffffff8111156110c8576110c7610c83565b5b6110d484828501611066565b91505092915050565b60008115159050919050565b6110f2816110dd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611132578082015181840152602081019050611117565b60008484015250505050565b6000611149826110f8565b6111538185611103565b9350611163818560208601611114565b61116c81610cb9565b840191505092915050565b600060408201905061118c60008301856110e9565b818103602083015261119e818461113e565b90509392505050565b6000602082840312156111bd576111bc610c7e565b5b60006111cb84828501610c9f565b91505092915050565b60006040820190506111e96000830185610f43565b6111f66020830184610f43565b9392505050565b60006060820190506112126000830186610bb8565b61121f6020830185610bb8565b61122c6040830184610bb8565b949350505050565b6000819050919050565b61124781611234565b82525050565b600067ffffffffffffffff82169050919050565b61126a8161124d565b82525050565b600060a082019050611285600083018861123e565b6112926020830187611261565b61129f6040830186610fb5565b6112ac6060830185610f7d565b6112b96080830184610f7d565b9695505050505050565b6000815190506112d281610c88565b92915050565b6000602082840312156112ee576112ed610c7e565b5b60006112fc848285016112c3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133f82610bae565b915061134a83610bae565b925082820390508181111561136257611361611305565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113d182610bae565b91506113dc83610bae565b9250826113ec576113eb611397565b5b828206905092915050565b600081905092915050565b50565b60006114126000836113f7565b915061141d82611402565b600082019050919050565b600061143382611405565b915081905091905056fea264697066735822122096ed3a619434305817e88e6e0c2e18f60dbd00f99119422ba76b57eedecceaed64736f6c634300081c0033",
  "devdoc": {
    "author": "Abdul Ahad",
    "details": "This implements chainlink VRF-V2 and chainlink Automation",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      }
    },
    "title": "A Raffle contract that uses Chainlink VRF to pick a winner",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract raffle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 204,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)199"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)199": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}